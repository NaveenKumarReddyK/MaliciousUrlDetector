const express = require("express");
const cheerio = require("cheerio");
const requestUrl = require("request");
const urlParser = require("url");
const fs = require("fs");
const app = express();
const bodyParser = require("body-parser");
const cors = require("cors");

app.use(cors({ credentials: true, origin: "http://localhost:3000" }));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.post("/gethrefs", function (req, res) {
  let bodyhtml;
  let linksJson = [];
  var AHttpLinkIndex = 1;

  // const url = "http://www.imdb.com/title/tt1229340/";
  const url = req.body.urlName;
  fs.writeFileSync("X:/malwareproject/Backend/HtmlText/html.txt", "");
  fs.writeFileSync("X:/malwareproject/Backend/HtmlText/Alinks.txt", "");
  fs.writeFileSync("X:/malwareproject/Backend/HtmlText/ImgSrc.txt", "");
  fs.writeFileSync("X:/malwareproject/Backend/HtmlText/AHttpLink.txt", "");
  fs.writeFileSync("X:/malwareproject/Backend/HtmlText/iframeHttpLink.txt", "");
  requestUrl(url, function (err, hrefResponse, html) {
    if (!err) {
      const $ = cheerio.load(html);

      bodyhtml = html;
      fs.writeFileSync("X:/malwareproject/Backend/HtmlText/html.txt", html);
      //#################################################################################
      $("a").each(function () {
        let aLink = $(this).attr("href");
        fs.appendFileSync(
          "X:/malwareproject/Backend/HtmlText/Alinks.txt",
          aLink + "\n"
        );
      });
      //#################################################################################
      $("img").each(function () {
        let imgSrc;
        imgSrc = $(this).attr("src");
        fs.appendFileSync(
          "X:/malwareproject/Backend/HtmlText/ImgSrc.txt",
          imgSrc + "\n"
        );
      });
      //################################ GET HOST NAMES ONLY #################################################
      $('a[href^="http"]').each(function () {
        let aHttp, cleanUrl;

        aHttp = $(this).attr("href");
        const newUrl = urlParser.parse(aHttp);
        cleanUrl = newUrl.hostname;
        cleanUrl = cleanUrl.replace("www.", "");

        linksJson.push({
          aLink: cleanUrl,
        });
      });

      //#################################################################################
      $("iframe").each(function () {
        let iframeHttp;
        iframeHttp = $(this).attr("src");
        if (iframeHttp !== "") {
          fs.appendFileSync(
            "X:/malwareproject/Backend/HtmlText/iframeHttpLink.txt",
            iframeHttp + "\n"
          );
        }
      });
      res.json(linksJson);
    }
  });
});

//########################### URL VOID SCAN ###############################################
app.get("/urlvoidresult", function (req, res) {
  const urlVoid = "https://www.urlvoid.com/scan/" + req.body.urlVoidurl;
  requestUrl(urlVoid, function (err, reqRes, urlVoidHtml) {
    if (!err) {
      const $ = cheerio.load(urlVoidHtml);
      // let urlVoidHtmlBody
      let tdVal, resWebStatus;
      tdVal = $("tbody").first().find("tr:nth-child(3) td:nth-child(2)").text();
      tdVal = tdVal.toString();
      tdVal = tdVal.substr(0, tdVal.indexOf("/"));

      fs.writeFileSync(
        "X:/malwareproject/Backend/HtmlText/urlVoid_Html.txt",
        urlVoidHtml
      );
      if (tdVal >= 0 && tdVal < 5) {
        resWebStatus = "Secure";
      } else if (tdVal >= 5 && tdVal < 15) {
        resWebStatus = "Affected with malware but risk is =====> LOW <=====";
      } else if (tdVal >= 15 && tdVal < 20) {
        resWebStatus =
          "Affected with malware but risk is  =====> MODERATE <=====";
      } else if (tdVal > 20) {
        resWebStatus = "Affected with malware but risk is  =====> HIGH <=====";
      }
      console.log("Website Score " + tdVal + "Website Status " + resWebStatus);
      res.json({ "Website Score ": tdVal, "Website Status ": resWebStatus });
    }
  });
});

//#############################################################################################

//########################### VIRUS TOTAL API SCAN ###############################################
app.get("/vtapi", function (req, res) {
  var options = {
    method: "GET",
    url:
      "https://www.virustotal.com/vtapi/v2/url/report?apikey=d5055ddaf9f1345c34cf6dc18f502feaa186ec07223e3bf8178eebeda4547556&resource=" +
      req.body.vtUrl,
  };
  requestUrl(options, function (error, response, body) {
    // var vtRes = JSON.stringify(body);
    var vtRes = JSON.parse(body);
    var positiveCount = vtRes.positives;
    var mlSeverity;
    if (positiveCount < 10) {
      mlSeverity = "LOW";
    } else if (positiveCount >= 10 && positiveCount < 20) {
      mlSeverity = "MODERATE";
    } else if (positiveCount >= 20 && positiveCount < 30) {
      mlSeverity = "HIGH";
    } else if (positiveCount >= 30) {
      mlSeverity = "VERY HIGH";
    }
    console.log(
      "Totally detetced malwares : " +
        positiveCount +
        " Malware Severity : " +
        mlSeverity
    );
    res.json({
      "Totally detetced malwares  ": positiveCount,
      Severity: mlSeverity,
    });
  });
});

//########################## METADEFENDER SCAN  #############################################
app.get("/metadscan", function (req, res) {
  var options = {
    url: "https://api.metadefender.com/v4/domain/" + req.body.metaScanUrl,
    headers: {
      apikey: "fd6815809853af082e8cdb05daa4b563",
    },
  };

  requestUrl(options, function (error, response, body) {
    // console.log(JSON.stringify(body));
    var resJson = JSON.parse(body);
    var resWebStatus;
    if (resJson.lookup_results.detected_by <= 3) {
      resWebStatus = "Secure";
    } else if (
      resJson.lookup_results.detected_by > 3 &&
      resJson.lookup_results.detected_by <= 5
    ) {
      resWebStatus = "Mildy infected by some virus";
    } else if (resJson.lookup_results.detected_by > 5) {
      resWebStatus = "Unsecure";
    }
    console.log(
      "Malware Detection rate" +
        resJson.lookup_results.detected_by +
        "Website Status" +
        resWebStatus
    );
    res.json({
      "Malware Detction Score": resJson.lookup_results.detected_by,
      "Website Status": resWebStatus,
    });
  });
});

//#############################################################################################
app.listen(4000, function (err) {
  if (err) {
    console.log("Error while starting the server");
  }
  console.log("Sucessfuly connected to the port 4000");
});
